package com.removePalindromicSubsequences;
import java.util.*;

/*
You are given a string s consisting only of letters 'a' and 'b'. 
In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by 
deleting some characters of a given string without changing its order. 
Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward 
as well as forward.


Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed 
in a single step.

Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".
*/

public class E1332_Remove_Palindromic_Subsequences {

	public static void main(String[] args) {
		String input = "baabb";
        int output = removePalindromeSub(input);
        System.out.println("input: " + (input) + "\noutput: " + (output));
	}
	
	/*
    solution:
    If it's empty sting, return 0;
	If it's palindrome, return 1;
	Otherwise, we need at least 2 operation.
    */
	
	/**
     * @param s: a string
     * @return: the minimum number of steps to make the given string empty
     */
	public static int removePalindromeSub(String s) {
        return s.isEmpty() ? 0 : (s.equals(new StringBuilder(s).reverse().toString()) ? 1:2);
    }

}
